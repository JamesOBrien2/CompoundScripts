# Name: dft-solvation-energy
#
# This protocol computes the solvation energy in a solvent.
#
# For a reference to the methodology please refer to:
#
# Miquel Garcia-Rates Frank Neese, J Comput. Chem. 2020;41:922-939
# Effect of the Solute Cavity on the Solvation Energy and its Derivatives within the 
# Framework of the Gaussian Charge Scheme 
#
# This protocol needs two steps
# In Step 1 The geometry is optimized in vacuum 
#
# In Step 2 The geometry optimized in the previous step is now optimized in the solvent
#
# Then the free energy of solvation will simply be the final energy of the second calculation.
# minus the final energy of the first calculation
#
#****************************************** NOTES ******************************************
# NOTE 1: The energies are given in Hartrees. Here just for convenience we also calculate the energy
#         in kcal/mol
#
# NOTE 2: The details of the calculation (functional, basis set, ... etc) can be adjusted but they 
#         should be the same in both calculations 
#
# NOTE 3: For the case of solvation we use the Gaussian charge scheme with a vdW-type cavity for
#         the solute cavity (surfacetype vdw_gaussian in the %cpcm block)
#
# NOTE 4: We choose "cds_cpcm 2" in the %cpcm block which includes a non-electrostatic solvation
#         component to the energy (this tag is just usable for organic solutes in certain solvents)
#
# NOTE 5: For the second step here we guess charge and multiplicity 0 and 1.
#
# NOTE 6: For the first calculation we use the %base to change the name to vacuumGeometry so that 
#         it is easy to know the name for the second one. This could of course change but it should 
#         be consistent for both calculations
#
# NOTE 6: This scheme will work for DFT calculations because we read the total energy through the
#         it is easy to know the name for the second one. This could of course change but it should
#         be consistent for both calculations
#
# NOTE 7: In this calculation  we use the correction from S. Grimme and for this reason we also add
#         explicitly this correction both on vacuum and solvent.
#
# First define some variables:
Variable E_vac, E_solv;             # Total energies in vacuum and solvent
Variable ZPE_vac, ZPE_solv;         # Zero point energies
Variable vdw_vac, vdw_solv;         # van der Waals correction
Variable HartToKcal;                # Conversion factor from Hartree to kcal/mol
Variable DE_El_Hartree, DE_El_Kcal; # Solvation energies in Harrtee and kcal/mol
#
# Optimization in vacuum
# (Calculation 1)
New_Step
  !RKS B3LYP RIJCOSX def2-TZVP def2/J D3BJ defGrid3 verytightscf verytightopt
  %base "vacuumGeometry" 
Step_End
Read E_vac = SCF_ENERGY[1];         
Read vdw_vac = VDW_CORRECTION[1];   
#
# Second step: Optimization in solvent
# (Calculation 2)
New_Step
  !RKS B3LYP RIJCOSX def2-TZVP def2/J D3BJ defGrid3 verytightscf verytightopt CPCM(water)
  * xyzfile 0 1 vacuumGeometry.xyz
  %cpcm
    surfacetype vdw_gaussian
  End
STEP_END
Read E_solv = SCF_ENERGY[2];        
Read vdw_solv = VDW_CORRECTION[2];  
#
# Now evaluate the difference
HartToKcal = 627.5096080305927;   
DE_El_Hartree  = E_solv +vdw_solv - E_vac - vdw_vac;  
DE_El_Kcal     = HartToKcal*DE_El_Hartree ; 
#
# ****************** ADD SOME NICE PRINTING ***********************
print( "  $$$$$$$$$$$$$$$$$$$$$$$$$$$$ COMPOUND JOB RESULTS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ")
print( "  Free energy in vacuum: ")
print( "  ================== ")
print( "  Electronic Energy in Vacuum  [Eh] ")
print( "  = %f", E_vac) 
#
print( "  Free energy in solution:")
print( "  ==================")
print( "  Electronic Energy in Solution [Eh]")
print( "  = %f", E_solv) 

print( "  Solvation Energy:")
print( "  ==================")
print( "  Electronic Energy contribution [kca/mol]")
print( "  = %f", DE_El_Kcal) 
#
print( "  -----------------------------------------------------------------------------------------------------")
print( "  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ END $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ")
End
