# Name: solvation_energies
#
# The protocole calculates how the dipole moment changes when solvating a solute.
# for this it calculates the ratio of the dipole moment in vacuum to the dipole 
# moment in a solvent#
# For a reference to the methodology please refer to:
#
# Miquel Garcia-Rates Frank Neese, J Comput. Chem. 2020;41:922-939
# Effect of the Solute Cavity on the Solvation Energy and its Derivatives within the 
# Framework of the Gaussian Charge Scheme 
#
# This protocol needs two steps
# In Step 1 The geometry is optimized in vacuum and it dipole moment is evaluated
#
# In Step 2 The geometry optimized in the previous step is now optimized in the solvent
#           and the dipole moment is evaluated in the solvent
#
# Then the ratio d(solvent)/d(vacuum) is evaluated
#
#****************************************** NOTES ******************************************
# NOTE 1: The details of the calculation (functional, basis set, ... etc) can be adjusted but they 
#         should be the same in both calculations 
#
# NOTE 2: For the case of solvation we use the Gaussian charge scheme with a vdW-type cavity for
#         the solute cavity (surfacetype vdw_gaussian in the %cpcm block)
#
# NOTE 3: For the second step here we guess charge and multiplicity 0 and 1.
#
# NOTE 4: For the first calculation we use the %base to change the name to vacuumGeometry so that 
#         it is easy to know the name for the second one. This could of course change but it should 
#         be consistent for both calculations
#
# NOTE 5: This scheme will work for DFT calculations because we read the total energy through the
#         it is easy to know the name for the second one. This could of course change but it should
#         be consistent for both calculations
#
# First define some variables:
Variable d_vac, d_solv;      # Dipole moments in vacuum and solvent
Variable ratio;              # ratio of dipole moments
#
# Optimization in vacuum
# (Calculation 1)
New_Step
  !RKS B3LYP RIJCOSX def2-TZVP def2/J D3BJ verytightscf verytightopt
  %base "vacuumGeometry" 
Step_End
Read d_vac = SCF_DIPOLE_MAGNITUDE_DEBYE[1];   
#
# Second step: Optimization in solvent
# (Calculation 2)
New_Step
  !RKS B3LYP RIJCOSX def2-TZVP def2/J D3BJ  verytightscf verytightopt CPCM(water)
  * xyzfile 0 1 vacuumGeometry.xyz
  %cpcm
    surfacetype vdw_gaussian
  End
STEP_END
Read d_solv = SCF_DIPOLE_MAGNITUDE_DEBYE[2];   
#
# Now evaluate the ratio
ratio  = d_solv/d_vac;            
End
